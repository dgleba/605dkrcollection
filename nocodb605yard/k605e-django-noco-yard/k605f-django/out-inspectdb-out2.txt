starting schedulerapp apps.py appconfig
INFO:apscheduler.scheduler:Scheduler started
Jobstore default:
    No scheduled jobs
DEBUG:apscheduler.scheduler:Looking for jobs to run
DEBUG:apscheduler.scheduler:No jobs; waiting until a job is added
/usr/local/lib/python3.7/site-packages/apscheduler/util.py:95: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html
  if obj.zone == 'local':
/usr/local/lib/python3.7/site-packages/apscheduler/triggers/interval.py:66: PytzUsageWarning: The normalize method is no longer necessary, as this time zone supports the fold attribute (PEP 495). For more details on migrating to a PEP 495-compliant implementation, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html
  return self.timezone.normalize(next_fire_time)
INFO:apscheduler.scheduler:Added job "SchedulerappConfig.ready.<locals>.myjob01" to job store "default"
DEBUG:apscheduler.scheduler:Looking for jobs to run
DEBUG:apscheduler.scheduler:Next wakeup is due at 2021-11-24 20:44:36.359991-05:00 (in 1799.990803 seconds)
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class BlogappApplication(models.Model):
    source = models.CharField(max_length=252)
    application = models.CharField(max_length=252)
    pts_topology = models.CharField(max_length=252)
    num_speeds = models.CharField(max_length=252, blank=True, null=True)
    pts_supplier = models.CharField(max_length=252, blank=True, null=True)
    total_gear_ratio = models.CharField(max_length=252, blank=True, null=True)
    total_center_distance_mm = models.CharField(max_length=252, blank=True, null=True)
    differential_type = models.CharField(max_length=252, blank=True, null=True)
    load_spectrum_id = models.CharField(max_length=252, blank=True, null=True)
    lubrication = models.CharField(max_length=252, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    sort_order = models.IntegerField(blank=True, null=True)
    active_status = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'blogapp_application'


class BlogappApplication2(models.Model):
    source = models.CharField(max_length=252)
    application = models.CharField(max_length=252)
    pts_topology = models.CharField(max_length=252)
    num_speeds = models.CharField(max_length=252, blank=True, null=True)
    pts_supplier = models.CharField(max_length=252, blank=True, null=True)
    total_gear_ratio = models.CharField(max_length=252, blank=True, null=True)
    total_center_distance_mm = models.CharField(max_length=252, blank=True, null=True)
    differential_type = models.CharField(max_length=252, blank=True, null=True)
    load_spectrum_id = models.CharField(max_length=252, blank=True, null=True)
    lubrication = models.CharField(max_length=252, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    sort_order = models.IntegerField(blank=True, null=True)
    active_status = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'blogapp_application2'


class BlogappApplicationVehicles(models.Model):
    application = models.ForeignKey(BlogappApplication, models.DO_NOTHING)
    vehicle = models.ForeignKey('BlogappVehicle', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'blogapp_application_vehicles'
        unique_together = (('application', 'vehicle'),)


class BlogappGroup(models.Model):
    name = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'blogapp_group'


class BlogappGroupMembers(models.Model):
    group = models.ForeignKey(BlogappGroup, models.DO_NOTHING)
    person = models.ForeignKey('BlogappPerson', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'blogapp_group_members'
        unique_together = (('group', 'person'),)


class BlogappPerson(models.Model):
    name = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'blogapp_person'


class BlogappPost(models.Model):
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    title = models.CharField(max_length=230)
    body = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'blogapp_post'


class BlogappVehicle(models.Model):
    vehicle_maker = models.CharField(max_length=252, blank=True, null=True)
    vehicle_model = models.CharField(max_length=252, blank=True, null=True)
    vehicle_class_si_vehicle_segment = models.CharField(max_length=252, blank=True, null=True)
    maximum_speed_kph = models.BigIntegerField(blank=True, null=True)
    number_of_electric_motors = models.BigIntegerField(blank=True, null=True)
    max_motor_power_kw = models.IntegerField(db_column='max_ motor_power_kw', blank=True, null=True)  # Field renamed to remove unsuitable characters.
    max_motor_torque_nm = models.BigIntegerField(blank=True, null=True)
    max_motor_speed_rpm = models.BigIntegerField(blank=True, null=True)
    source = models.CharField(max_length=252, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    sort_order = models.IntegerField(blank=True, null=True)
    active_status = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'blogapp_vehicle'


class BlogappVehicle2(models.Model):
    vehicle_maker = models.CharField(max_length=252)
    vehicle_model = models.CharField(max_length=252)
    vehicle_class_si_vehicle_segment = models.CharField(max_length=252, blank=True, null=True)
    maximum_speed_kph = models.BigIntegerField(blank=True, null=True)
    number_of_electric_motors = models.BigIntegerField(blank=True, null=True)
    max_motor_power_kw = models.IntegerField(db_column='max_ motor_power_kw', blank=True, null=True)  # Field renamed to remove unsuitable characters.
    max_motor_torque_nm = models.BigIntegerField(blank=True, null=True)
    max_motor_speed_rpm = models.BigIntegerField(blank=True, null=True)
    source = models.CharField(max_length=252, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    sort_order = models.IntegerField(blank=True, null=True)
    active_status = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'blogapp_vehicle2'


class BlogappVehicle2Application2S(models.Model):
    vehicle2 = models.ForeignKey(BlogappVehicle2, models.DO_NOTHING)
    application2 = models.ForeignKey(BlogappApplication2, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'blogapp_vehicle2_application2s'
        unique_together = (('vehicle2', 'application2'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Nc2BfwNcM2MNc2BfwContactsNc2BfwCities(models.Model):
    id = models.BigAutoField(primary_key=True)
    nc_2bfw_cities_c = models.ForeignKey('Nc2BfwCities', models.DO_NOTHING, db_column='nc_2bfw__cities_c_id')  # Field renamed because it contained more than one '_' in a row.
    nc_2bfw_contacts_p = models.ForeignKey('Nc2BfwContacts', models.DO_NOTHING, db_column='nc_2bfw__contacts_p_id')  # Field renamed because it contained more than one '_' in a row.

    class Meta:
        managed = False
        db_table = 'nc_2bfw___nc_m2m_nc_2bfw__contacts_nc_2bfw__cities'


class Nc2BfwNcM2MNc2BfwContactsNc2BfwTag(models.Model):
    nc_2bfw_tag_c = models.OneToOneField('Nc2BfwTag', models.DO_NOTHING, db_column='nc_2bfw__tag_c_id', primary_key=True)  # Field renamed because it contained more than one '_' in a row.
    nc_2bfw_contacts_p = models.ForeignKey('Nc2BfwContacts', models.DO_NOTHING, db_column='nc_2bfw__contacts_p_id')  # Field renamed because it contained more than one '_' in a row.

    class Meta:
        managed = False
        db_table = 'nc_2bfw___nc_m2m_nc_2bfw__contacts_nc_2bfw__tag'
        unique_together = (('nc_2bfw_tag_c', 'nc_2bfw_contacts_p'),)


class Nc2BfwNcM2MNc2BfwNoteNc2BfwTag(models.Model):
    nc_2bfw_tag_c = models.OneToOneField('Nc2BfwTag', models.DO_NOTHING, db_column='nc_2bfw__tag_c_id', primary_key=True)  # Field renamed because it contained more than one '_' in a row.
    nc_2bfw_note_p = models.ForeignKey('Nc2BfwNote', models.DO_NOTHING, db_column='nc_2bfw__note_p_id')  # Field renamed because it contained more than one '_' in a row.

    class Meta:
        managed = False
        db_table = 'nc_2bfw___nc_m2m_nc_2bfw__note_nc_2bfw__tag'
        unique_together = (('nc_2bfw_tag_c', 'nc_2bfw_note_p'),)


class Nc2BfwCities(models.Model):
    title = models.CharField(max_length=45, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    number = models.IntegerField(db_column='Number', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'nc_2bfw__cities'


class Nc2BfwContacts(models.Model):
    title = models.CharField(max_length=45, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    phone = models.CharField(max_length=45, blank=True, null=True)
    name = models.CharField(max_length=45, blank=True, null=True)
    picture = models.TextField(blank=True, null=True)
    country = models.CharField(max_length=45, blank=True, null=True)
    eml = models.CharField(max_length=45, blank=True, null=True)
    title21 = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_2bfw__contacts'


class Nc2BfwNote(models.Model):
    title = models.CharField(max_length=45, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    body = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_2bfw__note'


class Nc2BfwTag(models.Model):
    title = models.CharField(max_length=45, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_2bfw__tag'


class Nc6Ty6Issue(models.Model):
    title = models.CharField(max_length=45, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    issue_descr = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_6ty6__issue'


class NcAcl(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    tn = models.CharField(max_length=255, blank=True, null=True)
    acl = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_acl'


class NcApiTokens(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    permissions = models.TextField(blank=True, null=True)
    token = models.TextField(blank=True, null=True)
    expiry = models.CharField(max_length=255, blank=True, null=True)
    enabled = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_api_tokens'


class NcAudit(models.Model):
    user = models.CharField(max_length=255, blank=True, null=True)
    ip = models.CharField(max_length=255, blank=True, null=True)
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    model_name = models.CharField(max_length=100, blank=True, null=True)
    model_id = models.CharField(max_length=100, blank=True, null=True)
    op_type = models.CharField(max_length=255, blank=True, null=True)
    op_sub_type = models.CharField(max_length=255, blank=True, null=True)
    status = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    details = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_audit'


class NcCron(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    env = models.CharField(max_length=255, blank=True, null=True)
    pattern = models.CharField(max_length=255, blank=True, null=True)
    webhook = models.CharField(max_length=255, blank=True, null=True)
    timezone = models.CharField(max_length=255, blank=True, null=True)
    active = models.IntegerField(blank=True, null=True)
    cron_handler = models.TextField(blank=True, null=True)
    payload = models.TextField(blank=True, null=True)
    headers = models.TextField(blank=True, null=True)
    retries = models.IntegerField(blank=True, null=True)
    retry_interval = models.IntegerField(blank=True, null=True)
    timeout = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_cron'


class NcDisabledModelsForRole(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=45, blank=True, null=True)
    title = models.CharField(max_length=45, blank=True, null=True)
    type = models.CharField(max_length=45, blank=True, null=True)
    role = models.CharField(max_length=45, blank=True, null=True)
    disabled = models.IntegerField(blank=True, null=True)
    tn = models.CharField(max_length=255, blank=True, null=True)
    rtn = models.CharField(max_length=255, blank=True, null=True)
    cn = models.CharField(max_length=255, blank=True, null=True)
    rcn = models.CharField(max_length=255, blank=True, null=True)
    relation_type = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_disabled_models_for_role'


class NcEvolutions(models.Model):
    title = models.CharField(max_length=255)
    titledown = models.CharField(db_column='titleDown', max_length=255, blank=True, null=True)  # Field name made lowercase.
    description = models.CharField(max_length=255, blank=True, null=True)
    batch = models.IntegerField(blank=True, null=True)
    checksum = models.CharField(max_length=255, blank=True, null=True)
    status = models.IntegerField(blank=True, null=True)
    created = models.DateTimeField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_evolutions'


class NcHooks(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    env = models.CharField(max_length=255, blank=True, null=True)
    tn = models.CharField(max_length=255, blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    event = models.CharField(max_length=255, blank=True, null=True)
    operation = models.CharField(max_length=255, blank=True, null=True)
    async_field = models.IntegerField(db_column='async', blank=True, null=True)  # Field renamed because it was a Python reserved word.
    payload = models.IntegerField(blank=True, null=True)
    url = models.TextField(blank=True, null=True)
    headers = models.TextField(blank=True, null=True)
    condition = models.TextField(blank=True, null=True)
    notification = models.TextField(blank=True, null=True)
    retries = models.IntegerField(blank=True, null=True)
    retry_interval = models.IntegerField(blank=True, null=True)
    timeout = models.IntegerField(blank=True, null=True)
    active = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_hooks'


class NcLoaders(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    parent = models.CharField(max_length=255, blank=True, null=True)
    child = models.CharField(max_length=255, blank=True, null=True)
    relation = models.CharField(max_length=255, blank=True, null=True)
    resolver = models.CharField(max_length=255, blank=True, null=True)
    functions = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_loaders'


class NcMigrations(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    up = models.TextField(blank=True, null=True)
    down = models.TextField(blank=True, null=True)
    title = models.CharField(max_length=255)
    title_down = models.CharField(max_length=255, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    batch = models.IntegerField(blank=True, null=True)
    checksum = models.CharField(max_length=255, blank=True, null=True)
    status = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_migrations'


class NcModels(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    alias = models.CharField(max_length=255, blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    meta = models.TextField(blank=True, null=True)
    schema = models.TextField(blank=True, null=True)
    schema_previous = models.TextField(blank=True, null=True)
    services = models.TextField(blank=True, null=True)
    messages = models.TextField(blank=True, null=True)
    enabled = models.IntegerField(blank=True, null=True)
    parent_model_title = models.CharField(max_length=255, blank=True, null=True)
    show_as = models.CharField(max_length=255, blank=True, null=True)
    query_params = models.TextField(blank=True, null=True)
    list_idx = models.IntegerField(blank=True, null=True)
    tags = models.CharField(max_length=255, blank=True, null=True)
    pinned = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    mm = models.IntegerField(blank=True, null=True)
    m_to_m_meta = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_models'


class NcPlugins(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=45, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    active = models.IntegerField(blank=True, null=True)
    rating = models.FloatField(blank=True, null=True)
    version = models.CharField(max_length=255, blank=True, null=True)
    docs = models.CharField(max_length=255, blank=True, null=True)
    status = models.CharField(max_length=255, blank=True, null=True)
    status_details = models.CharField(max_length=255, blank=True, null=True)
    logo = models.CharField(max_length=255, blank=True, null=True)
    icon = models.CharField(max_length=255, blank=True, null=True)
    tags = models.CharField(max_length=255, blank=True, null=True)
    category = models.CharField(max_length=255, blank=True, null=True)
    input_schema = models.TextField(blank=True, null=True)
    input = models.TextField(blank=True, null=True)
    creator = models.CharField(max_length=255, blank=True, null=True)
    creator_website = models.CharField(max_length=255, blank=True, null=True)
    price = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_plugins'


class NcProjects(models.Model):
    id = models.CharField(primary_key=True, max_length=128)
    title = models.CharField(max_length=255, blank=True, null=True)
    status = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    config = models.TextField(blank=True, null=True)
    meta = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_projects'


class NcProjectsUsers(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    user_id = models.PositiveIntegerField(blank=True, null=True)
    roles = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_projects_users'


class NcRelations(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    tn = models.CharField(max_length=255, blank=True, null=True)
    rtn = models.CharField(max_length=255, blank=True, null=True)
    field_tn = models.CharField(db_column='_tn', max_length=255, blank=True, null=True)  # Field renamed because it started with '_'.
    field_rtn = models.CharField(db_column='_rtn', max_length=255, blank=True, null=True)  # Field renamed because it started with '_'.
    cn = models.CharField(max_length=255, blank=True, null=True)
    rcn = models.CharField(max_length=255, blank=True, null=True)
    field_cn = models.CharField(db_column='_cn', max_length=255, blank=True, null=True)  # Field renamed because it started with '_'.
    field_rcn = models.CharField(db_column='_rcn', max_length=255, blank=True, null=True)  # Field renamed because it started with '_'.
    referenced_db_alias = models.CharField(max_length=255, blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    db_type = models.CharField(max_length=255, blank=True, null=True)
    ur = models.CharField(max_length=255, blank=True, null=True)
    dr = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    fkn = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_relations'


class NcResolvers(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    resolver = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    acl = models.TextField(blank=True, null=True)
    functions = models.TextField(blank=True, null=True)
    handler_type = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_resolvers'


class NcRoles(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_roles'


class NcRoutes(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    tn = models.CharField(max_length=255, blank=True, null=True)
    tnp = models.CharField(max_length=255, blank=True, null=True)
    tnc = models.CharField(max_length=255, blank=True, null=True)
    relation_type = models.CharField(max_length=255, blank=True, null=True)
    path = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    handler = models.TextField(blank=True, null=True)
    acl = models.TextField(blank=True, null=True)
    order = models.IntegerField(blank=True, null=True)
    functions = models.TextField(blank=True, null=True)
    handler_type = models.IntegerField(blank=True, null=True)
    is_custom = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_routes'


class NcRpc(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    tn = models.CharField(max_length=255, blank=True, null=True)
    service = models.TextField(blank=True, null=True)
    tnp = models.CharField(max_length=255, blank=True, null=True)
    tnc = models.CharField(max_length=255, blank=True, null=True)
    relation_type = models.CharField(max_length=255, blank=True, null=True)
    order = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    acl = models.TextField(blank=True, null=True)
    functions = models.TextField(blank=True, null=True)
    handler_type = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_rpc'


class NcSharedViews(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    model_name = models.CharField(max_length=255, blank=True, null=True)
    meta = models.TextField(blank=True, null=True)
    query_params = models.TextField(blank=True, null=True)
    view_id = models.CharField(max_length=255, blank=True, null=True)
    show_all_fields = models.IntegerField(blank=True, null=True)
    allow_copy = models.IntegerField(blank=True, null=True)
    password = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    view_type = models.CharField(max_length=255, blank=True, null=True)
    view_name = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_shared_views'


class NcStore(models.Model):
    project_id = models.CharField(max_length=255, blank=True, null=True)
    db_alias = models.CharField(max_length=255, blank=True, null=True)
    key = models.CharField(max_length=255, blank=True, null=True)
    value = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    env = models.CharField(max_length=255, blank=True, null=True)
    tag = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nc_store'


class XcKnexMigrations(models.Model):
    name = models.CharField(max_length=255, blank=True, null=True)
    batch = models.IntegerField(blank=True, null=True)
    migration_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'xc_knex_migrations'


class XcKnexMigrationsLock(models.Model):
    index = models.AutoField(primary_key=True)
    is_locked = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'xc_knex_migrations_lock'


class XcUsers(models.Model):
    email = models.CharField(max_length=255, blank=True, null=True)
    password = models.CharField(max_length=255, blank=True, null=True)
    salt = models.CharField(max_length=255, blank=True, null=True)
    firstname = models.CharField(max_length=255, blank=True, null=True)
    lastname = models.CharField(max_length=255, blank=True, null=True)
    username = models.CharField(max_length=255, blank=True, null=True)
    refresh_token = models.CharField(max_length=255, blank=True, null=True)
    invite_token = models.CharField(max_length=255, blank=True, null=True)
    invite_token_expires = models.CharField(max_length=255, blank=True, null=True)
    reset_password_expires = models.DateTimeField()
    reset_password_token = models.CharField(max_length=255, blank=True, null=True)
    email_verification_token = models.CharField(max_length=255, blank=True, null=True)
    email_verified = models.IntegerField(blank=True, null=True)
    roles = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'xc_users'
